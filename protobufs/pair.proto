syntax = "proto3";
import "communicationinfo.proto";
import "parameterrange.proto";
import "result.proto";

package derec.message;
/*
 * Is the sender of this message (i.e., the responder) a
 * helper, or a sharer that is not in recovery mode, or a sharer that is
 * in recovery mode?
 */
enum SenderKind {
  SHARER_NON_RECOVERY = 0;
  SHARER_RECOVERY = 1;
  HELPER = 2;
}

/*
* ----------------------------------------------------------------------------
* Pairing protocol
* First message sent from the pairing initiator to the pairing
* responder. There would earlier have been communication of the information
* in a ContactMessage that was sent from the responder to the initiator by some
* other means. For example, the responder could display a QR code that the
* initiator scanned.
* The initiator can be helper or sharer, and
* the responder can be sharer or helper.
* ----------------------------------------------------------------------------
*/
message PairRequestMessage {
  /*
   * The kind of the sender of this message (i.e., the responder)
   */
  SenderKind senderKind = 1;

  /*
   * public key (PEM encoded) used for signing messages from the initiator;
   */
  string publicSignatureKey = 3;

  /*
   * public key (PEM encoded) used for encrypting messages to the initiator;
   */
  string publicEncryptionKey = 4;

  /*
   * senderâ€™s app-readable contact information,
   * such as name, phone number, etc.
   */
  CommunicationInfo communicationInfo = 5;

  /*
   * 32-byte (random) nonce to identify the pairing session
   */
  bytes nonce = 6;

  /*
   * The parameter range for the sender.
   */
  ParameterRange parameterRange = 7;
}

/*
 * Response, which is identical to the request, except without the
 * public encryption key, because it already happened during contact.
 */
message PairResponseMessage {
  /** the success or failure of processing the request */
  Result result = 1;


  /*
   * The kind of the sender of this message (i.e., the responder)
   */
  SenderKind senderKind = 2;

  /*
   * public signature key (PEM encoded) of the responder
   */
  string publicSignatureKey = 3;

  /*
   * app-readable contact information (e.g. name, phone number, etc.)
   */
  CommunicationInfo communicationInfo = 4;

  /*
   * 32-byte (random) nonce to identify the pairing session;
   * this is the same value as sent in the pairing request
   */
  bytes nonce = 5;

  /*
   * The parameter range for the sender.
   */
  ParameterRange parameterRange = 6;
}
